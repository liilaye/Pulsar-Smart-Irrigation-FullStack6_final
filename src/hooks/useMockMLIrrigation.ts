// Hook ML Irrigation simul√© pour la d√©mo - remplace useMLIrrigation.ts
import { useState, useEffect, useCallback } from 'react';
import { mockBackendService } from '@/services/mockBackendService';
import { activeUserService } from '@/services/activeUserService';
import { useMockMQTT } from '@/hooks/useMockMQTT';
import { toast } from "sonner";

interface MockMLRecommendation {
  duree_minutes: number;
  volume_eau_m3: number;
  matt: string;
  status: string;
  mqtt_started?: boolean;
  auto_irrigation?: boolean;
}

export const useMockMLIrrigation = () => {
  const [lastMLRecommendation, setLastMLRecommendation] = useState<MockMLRecommendation | null>(null);
  const [isMLActive, setIsMLActive] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [lastMLCommand, setLastMLCommand] = useState<string | null>(null);
  const [mlInputFeatures, setMLInputFeatures] = useState<number[] | null>(null);
  const [startTime, setStartTime] = useState<Date | null>(null);
  const [autoStopTimer, setAutoStopTimer] = useState<NodeJS.Timeout | null>(null);
  
  // Hook MQTT simul√© pour communication broker
  const { publishIrrigationCommand, isConnected } = useMockMQTT();

  // Reset complet de l'√©tat ML lors du changement d'acteur
  useEffect(() => {
    const resetMLState = () => {
      console.log('üü¢ [DEMO] Reset √©tat ML irrigation');
      setLastMLRecommendation(null);
      setIsMLActive(false);
      setIsLoading(false);
      setLastMLCommand(null);
      setMLInputFeatures(null);
      setStartTime(null);
      
      // NETTOYER le timer auto-stop si actif
      if (autoStopTimer) {
        clearTimeout(autoStopTimer);
        setAutoStopTimer(null);
      }
    };

    const unsubscribe = activeUserService.subscribe((user) => {
      if (user) {
        resetMLState();
      }
    });

    resetMLState();
    return unsubscribe;
  }, [autoStopTimer]);

  // FONCTION D'ARR√äT CRITIQUE (manuelle OU automatique)
  const stopMLIrrigation = useCallback(async (isAutoStop = false) => {
    const reason = isAutoStop ? 'Timer ML √©coul√©' : 'Arr√™t manuel d\'urgence';
    console.log(`üü¢ [DEMO] ${reason} - Arr√™t irrigation simul√©e`);
    setLastMLCommand(`${reason} - Arr√™t via MQTT simul√© + Backend simul√©...`);
    
    // 1. PRIORIT√â : Commande MQTT OFF au broker simul√©
    const mqttSuccess = await publishIrrigationCommand(0);
    
    // 2. CONFIRMER avec Backend simul√©
    const response = await mockBackendService.stopIrrigation();
    
    // 3. NETTOYER l'√©tat
    setIsMLActive(false);
    setMLInputFeatures(null);
    setStartTime(null);
    
    if (autoStopTimer) {
      clearTimeout(autoStopTimer);
      setAutoStopTimer(null);
    }
    
    setLastMLCommand(`${reason} termin√© - MQTT: ${mqttSuccess ? '‚úÖ' : '‚ùå'} Backend: ${response.success ? '‚úÖ' : '‚ùå'}`);
    
    toast.success(`Irrigation ML arr√™t√©e (${isAutoStop ? 'Timer' : 'Manuel'}) [DEMO]`, {
      description: `Broker: ${mqttSuccess ? 'OFF envoy√©' : '√âchec'} | Backend: ${response.success ? 'OK' : 'Erreur'}`
    });
    
    return { mqttSuccess, backendSuccess: response.success };
  }, [publishIrrigationCommand, autoStopTimer]);

  // NETTOYAGE au d√©montage du composant
  useEffect(() => {
    return () => {
      if (autoStopTimer) {
        clearTimeout(autoStopTimer);
      }
    };
  }, [autoStopTimer]);

  const generateMLRecommendation = useCallback(async () => {
    if (isLoading) return;
    setIsLoading(true);
    setLastMLCommand('G√©n√©ration recommandation ML via Backend simul√©...');

    try {
      console.log('üü¢ [DEMO] G√©n√©ration recommandation ML simul√©e');
      const features = mockBackendService.getDefaultSoilClimateFeatures();
      const prediction = await mockBackendService.getMLRecommendation(features);
      
      if (prediction && prediction.status === 'ok') {
        const mockRecommendation: MockMLRecommendation = {
          duree_minutes: prediction.duree_minutes,
          volume_eau_m3: prediction.volume_eau_m3,
          matt: prediction.matt,
          status: prediction.status,
          auto_irrigation: false
        };
        
        setLastMLRecommendation(mockRecommendation);
        setMLInputFeatures(features);
        setLastMLCommand(`ML via Backend simul√©: ${Math.floor(prediction.duree_minutes)} min recommand√©es`);
        
        console.log('üü¢ [DEMO] Recommandation ML g√©n√©r√©e:', mockRecommendation);
        toast.success("Recommandation ML g√©n√©r√©e via Backend simul√©! [DEMO]", {
          description: `Dur√©e: ${Math.floor(prediction.duree_minutes)} minutes (${Math.round(prediction.volume_eau_m3 * 1000)}L)`
        });
      } else {
        throw new Error('Erreur dans la r√©ponse ML simul√©e');
      }
    } catch (error) {
      console.error('‚ùå [DEMO] Erreur g√©n√©ration ML:', error);
      setLastMLCommand('Erreur g√©n√©ration ML Backend simul√©');
      toast.error("Erreur ML Backend simul√© [DEMO]", {
        description: "Impossible de g√©n√©rer la recommandation ML via Backend simul√©"
      });
    } finally {
      setIsLoading(false);
    }
  }, [isLoading]);

  const toggleMLIrrigation = useCallback(async () => {
    if (isLoading) return;
    setIsLoading(true);
    
    try {
      if (isMLActive) {
        // ARR√äT MANUEL D'URGENCE
        console.log('üü¢ [DEMO] Arr√™t ML manuel demand√©');
        await stopMLIrrigation(false);
      } else {
        // D√âMARRER l'irrigation ML DIRECT
        if (!lastMLRecommendation) {
          setLastMLCommand('G√©n√©rez d\'abord une recommandation ML');
          toast.error("Aucune recommandation ML [DEMO]", {
            description: "Cliquez sur 'G√©n√©rer Recommandation ML' d'abord"
          });
          return;
        }

        console.log('üü¢ [DEMO] D√©marrage irrigation ML simul√©e');
        setLastMLCommand('D√©marrage ML direct via MQTT simul√©...');
        
        // ENVOI DIRECT de la commande MQTT simul√©e
        const mqttSuccess = await publishIrrigationCommand(1);
        
        if (mqttSuccess) {
          setIsMLActive(true);
          setStartTime(new Date());
          
          // PROGRAMMATION ARR√äT AUTOMATIQUE apr√®s dur√©e ML
          const durationMs = lastMLRecommendation.duree_minutes * 60 * 1000;
          const timer = setTimeout(async () => {
            console.log('üü¢ [DEMO] Timer ML √©coul√© - arr√™t automatique');
            await stopMLIrrigation(true); // Arr√™t automatique
          }, durationMs);
          setAutoStopTimer(timer);
          
          const endTime = new Date(Date.now() + durationMs);
          setLastMLCommand(`‚úÖ ML D√âMARR√â: ${Math.floor(lastMLRecommendation.duree_minutes)} min - Arr√™t auto programm√©`);
          
          console.log('üü¢ [DEMO] Irrigation ML d√©marr√©e avec succ√®s');
          toast.success("Irrigation ML d√©marr√©e [DEMO]", {
            description: `‚úÖ ${Math.floor(lastMLRecommendation.duree_minutes)} min | Arr√™t auto: ${endTime.toLocaleTimeString()}`
          });
        } else {
          setLastMLCommand('‚ùå √âchec envoi commande MQTT simul√©');
          toast.error("Erreur communication MQTT simul√© [DEMO]", {
            description: "Impossible d'envoyer la commande au broker simul√©"
          });
        }
      }
    } catch (error) {
      console.error('‚ùå [DEMO] Erreur syst√®me ML:', error);
      setLastMLCommand('‚ùå Erreur syst√®me ML + MQTT simul√©');
      toast.error("Erreur syst√®me ML [DEMO]", {
        description: "Probl√®me de communication avec le broker MQTT simul√©"
      });
    } finally {
      setIsLoading(false);
    }
  }, [isLoading, isMLActive, lastMLRecommendation, publishIrrigationCommand, stopMLIrrigation]);

  // Fonction pour obtenir des m√©triques simul√©es en temps r√©el
  const getMLMetrics = useCallback(() => {
    if (!isMLActive || !startTime) return null;
    
    const now = new Date();
    const elapsed = Math.floor((now.getTime() - startTime.getTime()) / 1000);
    const totalDuration = lastMLRecommendation ? lastMLRecommendation.duree_minutes * 60 : 0;
    const remaining = Math.max(0, totalDuration - elapsed);
    
    return {
      elapsedSeconds: elapsed,
      remainingSeconds: remaining,
      progressPercentage: totalDuration > 0 ? Math.min(100, (elapsed / totalDuration) * 100) : 0,
      estimatedEndTime: totalDuration > 0 ? new Date(startTime.getTime() + totalDuration * 1000) : null
    };
  }, [isMLActive, startTime, lastMLRecommendation]);

  return {
    // √âtat principal
    lastMLRecommendation,
    isMLActive,
    isLoading,
    lastMLCommand,
    mlInputFeatures,
    startTime,
    
    // Actions
    generateMLRecommendation,
    toggleMLIrrigation,
    stopMLIrrigation,
    
    // Nouvelles fonctions pour la d√©mo
    getMLMetrics,
    
    // √âtat de connexion
    isBackendConnected: true, // Toujours connect√© en mode simul√©
    isMqttConnected: isConnected
  };
};